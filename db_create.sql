DROP DATABASE IF EXISTS CSE305;
CREATE DATABASE CSE305
  CHARACTER SET utf8mb4;
USE CSE305;

CREATE TABLE Location (
  ZipCode INTEGER,
  City VARCHAR(50) NOT NULL,
  State VARCHAR(50) NOT NULL,
  PRIMARY KEY (ZipCode)
);

CREATE TABLE Accounts (
  Id INTEGER AUTO_INCREMENT,
  DateOpened DATE,
  Type VARCHAR(20) CHECK ( VALUE IN ("Limited", "Unlimited-1", "Unlimited-2", "Unlimited-3", "Admin", "CustRep") ),
  UserName CHAR(20),
  PassWord CHAR(20) NOT NULL,
  LastName VARCHAR(50),
  FirstName VARCHAR(50),
  Address VARCHAR(200),
  ZipCode INTEGER,
  Phone INTEGER,
  Email VARCHAR(60) NOT NULL,
  Rating INTEGER CHECK (Rating > 10 AND Rating < 101),
  CreditCardNumber VARCHAR(30),
  PRIMARY KEY (Id),
  UNIQUE (Email),
  FOREIGN KEY (ZipCode) REFERENCES Location (ZipCode)
    ON DELETE NO ACTION
    ON UPDATE CASCADE
);
INSERT INTO Accounts(`Id`, `Type`,`Email`,`PassWord`) VALUES(1, "Admin", "admin@admin.com", "123");

CREATE TABLE Employee (
  Id INTEGER AUTO_INCREMENT CHECK (Id > 0 AND Id < 1000000000),
  SSN INTEGER NOT NULL,
  StartDate DATETIME,
  HourlyRate INTEGER,
  AccountId INTEGER,
  PRIMARY KEY (Id),
  UNIQUE (SSN),
  FOREIGN KEY (AccountId) REFERENCES Accounts (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE
);
INSERT INTO Employee(`Id`, `SSN`) VALUES(1, "666666");


CREATE TABLE Movie (
  Id INTEGER AUTO_INCREMENT,
  Name VARCHAR(100) NOT NULL,
  Type CHAR(20) NOT NULL,
  Language CHAR(20),
  Director VARCHAR(100),
  Length INTEGER,
  ReleaseDate VARCHAR(50),
  Num5Rating INTEGER,
  Num4Rating INTEGER,
  Num3Rating INTEGER,
  Num2Rating INTEGER,
  Num1Rating INTEGER,
  DistrFee INTEGER,
  NumCopies INTEGER,
  ImageUrl CHAR(100),
  TrailerUrl CHAR(100),
  Synopsis VARCHAR(2000),
  ImdbId CHAR(20),
  PRIMARY KEY (Id)
);

CREATE TABLE Actor (
  Id INTEGER AUTO_INCREMENT,
  Name VARCHAR(50) NOT NULL,
  Dob VARCHAR(50),
  Rating DECIMAL(3,1) CHECK (Rating > 0 AND Rating < 10.1),
  NumRating INTEGER,
  ImageUrl CHAR(100),
  Biography VARCHAR(2000),
  ImdbId CHAR(20),
  BirthPlace VARCHAR(200),
  PRIMARY KEY (Id)
);

CREATE TABLE Orders (
  Id INTEGER AUTO_INCREMENT,
  OrderDate DATETIME,
  ReturnDate DATETIME,
  AccountId INTEGER,
  CustRepId INTEGER,
  MovieId INTEGER,
  Price INTEGER,
  PRIMARY KEY (Id),
  FOREIGN KEY (AccountId) REFERENCES Accounts (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  FOREIGN KEY (CustRepId) REFERENCES Employee (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  FOREIGN KEY (MovieId) REFERENCES Movie (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE
);

CREATE TABLE MovieQ (
  AccountId INTEGER,
  MovieId INTEGER,
  PRIMARY KEY (AccountId, MovieId),
  FOREIGN KEY (AccountId) REFERENCES Accounts (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  FOREIGN KEY (MovieId) REFERENCES Movie (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE
);

CREATE TABLE MovieF (
  AccountId INTEGER,
  MovieId INTEGER,
  PRIMARY KEY (AccountId, MovieId),
  FOREIGN KEY (AccountId) REFERENCES Accounts (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  FOREIGN KEY (MovieId) REFERENCES Movie (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE
);

CREATE TABLE AppearedIn (
  ActorId INTEGER,
  MovieId INTEGER,
  PRIMARY KEY (ActorId, MovieId),
  FOREIGN KEY (ActorId) REFERENCES Actor (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  FOREIGN KEY (MovieId) REFERENCES Movie (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE
);

CREATE TABLE Reviews (
  Id INTEGER AUTO_INCREMENT,
  AccountId INTEGER,
  MovieId INTEGER,
  Author VARCHAR(50),
  Content VARCHAR(10000),
  PRIMARY KEY (Id),
  FOREIGN KEY (AccountId) REFERENCES Accounts (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  FOREIGN KEY (MovieId) REFERENCES Movie (Id)
    ON DELETE NO ACTION
    ON UPDATE CASCADE
);
